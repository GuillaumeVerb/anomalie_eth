name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Show project structure
      run: |
        echo "Project structure:"
        ls -R
        echo -e "\nFile permissions:"
        ls -la src/
        ls -la tests/
        echo -e "\nContent of src/__init__.py:"
        cat src/__init__.py || echo "File is empty or doesn't exist"
        
    - name: Show requirements
      run: cat requirements.txt
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest==7.4.3 pytest-cov==4.1.0
        
    - name: Show environment information
      run: |
        echo "Python executable location:"
        which python
        echo -e "\nPython version and prefix:"
        python -c "import sys; print(f'Version: {sys.version}'); print(f'Prefix: {sys.prefix}')"
        echo -e "\nPython site-packages:"
        python -c "import site; print('\n'.join(site.getsitepackages()))"
        echo -e "\nInstalled packages locations:"
        pip list -v
        
    - name: Check critical dependencies
      run: |
        echo "Checking pandas..."
        python -c "import pandas; print(f'pandas version: {pandas.__version__}')"
        echo -e "\nChecking numpy..."
        python -c "import numpy; print(f'numpy version: {numpy.__version__}')"
        echo -e "\nChecking scikit-learn..."
        python -c "import sklearn; print(f'scikit-learn version: {sklearn.__version__}')"
        echo -e "\nChecking web3..."
        python -c "import web3; print(f'web3 version: {web3.__version__}')"
        echo -e "\nChecking eth_typing..."
        python -c "import eth_typing; print(f'eth_typing version: {eth_typing.__version__}')"
        
    - name: Check MLflow configuration
      run: |
        echo "Checking MLflow..."
        python -c "import mlflow; print(f'MLflow version: {mlflow.__version__}')"
        echo -e "\nMLflow tracking URI:"
        python -c "import mlflow; print(f'Tracking URI: {mlflow.get_tracking_uri()}')"
        echo -e "\nCreating MLflow experiment..."
        python -c "
        import mlflow
        from src.config import MLFLOW_TRACKING_URI
        mlflow.set_tracking_uri(MLFLOW_TRACKING_URI)
        experiment = mlflow.get_experiment_by_name('ethereum_anomaly_detection')
        if experiment is None:
            mlflow.create_experiment('ethereum_anomaly_detection')
        print('MLflow experiment configured successfully')
        "
        
    - name: Check test dependencies
      run: |
        echo "Checking pytest configuration..."
        python -c "import pytest; print(f'pytest version: {pytest.__version__}')"
        echo -e "\nPytest plugins:"
        pytest --trace-config
        echo -e "\nTest discovery:"
        PYTHONPATH=$PYTHONPATH:$(pwd) pytest --collect-only -v tests/
        
    - name: Show debug information
      run: |
        python --version
        pip list
        pip check
        python -c "import sys; print('Python path:', sys.path)"
        python -c "import os; print('Working directory:', os.getcwd())"
        
    - name: Test imports
      run: |
        echo "Testing imports..."
        PYTHONPATH=$PYTHONPATH:$(pwd) python -c "
        import sys
        print('Python path:', sys.path)
        print('Importing src...')
        import src
        print('src imported successfully')
        print('Importing src.modeling...')
        from src import modeling
        print('modeling imported successfully')
        print('Importing src.preprocessing...')
        from src import preprocessing
        print('preprocessing imported successfully')
        print('Importing src.config...')
        from src import config
        print('config imported successfully')
        "
        
    - name: Show source files
      run: |
        echo "Content of src/modeling.py:"
        cat src/modeling.py
        echo -e "\nContent of src/preprocessing.py:"
        cat src/preprocessing.py
        echo -e "\nContent of src/config.py:"
        cat src/config.py
        
    - name: Show test files
      run: |
        echo "Content of test_modeling.py:"
        cat tests/test_modeling.py
        echo -e "\nContent of test_preprocessing.py:"
        cat tests/test_preprocessing.py
        
    - name: Create directories
      run: |
        mkdir -p data/raw
        mkdir -p data/processed
        mkdir -p models
        ls -R data/
        
    - name: Run preprocessing test
      run: |
        echo "Running preprocessing test..."
        PYTHONPATH=$PYTHONPATH:$(pwd) python -m pytest tests/test_preprocessing.py -v --disable-pytest-warnings --tb=long -s
        
    - name: Run modeling test
      run: |
        echo "Running modeling test..."
        PYTHONPATH=$PYTHONPATH:$(pwd) python -m pytest tests/test_modeling.py -v --disable-pytest-warnings --tb=long -s
        
  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/ethereum-anomaly:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/ethereum-anomaly:${{ github.sha }}
        cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/ethereum-anomaly:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/ethereum-anomaly:buildcache,mode=max 